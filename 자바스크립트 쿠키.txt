자바스크립트 쿠키

쿠키는 클라이언트의 상태 정보를 유지하기 위한 기술
상태 정보를 키와 값 형태로 저장했다가 다음 요청 시 저장된 쿠키를 함께 전송한다.

<기본 동작 확인>
클라이언트 -> 서버  요청(처음 방문)
서버 -> 클라이언트 응답(클라이언트로 쿠키 전송)
클라이언트 ( 쿠키 저장) 
클라이언트 -> 서버  요청(재방문, 쿠키를 함께 전송) 
서버 ( 쿠키를 읽어 작업수행)

< 쿠키의 속성과 API>
1.void setValue = 쿠키의 값을 설정, 문자열을 입력하면 되는데 쉼표,세미콜론 같은 문자는 포함할 수 없다.
2.void setDomain = 쿠키에 적용할 도메인을 설정 = 도메인만 적용하고 싶다면 '도메인'형태로 기술. 
ex) setDomain(".nakija.co.kr") = www.nakija.co.kr 로도 가능하다.
3.void setPath = 쿠키가 적용될 경로를 지정 
4.void setMaxAge = 쿠키가 유지될 기간을 초 단위로 설정한다. 설정하지 않으면 웹 브라우저가 닫힐 때 쿠키가 같이 삭제된다.
5.new Cookie(String name, String value) : 이름과 값을 받아 새로운 쿠키를 생성한다.

<쿠키 정보를 읽는 메서드>
1.String getName() = 쿠키의 이름을 반환
2.String getValue() = 쿠키의 값을 반환
3.String getDomain() = 쿠키가 적용되는 도메인을 반환
4.String getPath() = 쿠키의 적용 경로를 반환. 단, setPath()로 설정한 값이 없다면 null 로 반환한다.
5.int getMaxAge() = 쿠키의 유지기간을 반환, 단 setMaxAge()로 설정한 값이 없아면 -1로 반환한다.

<JDBC 설정 및 데이터베이스 연결>
JDBC란 자바로 데이터베이스 연결 및 관력 작업을 할 때 사용하는 API
JDBC에서 사용하는 멤버변수 
1. Connection : 데이터베이스와 연결을 담당
2. Statement : 인파라미터가 없는 정직 쿼리문을 실행할 때 사용된다.
3. PreparedStatement: 인파라미터가 있는 동적 쿼리문을 실행할 떄 사용. 인파라미터는 쿼리문 작성 시 매개변수로 전달된 값을 설정할 때 사용.
4. ResultSet : SELECT 쿼리문의 결과를 저장할 때 사용


<1>Connection
주요기능 
* 데이터베이스에 연결을 열고 닫을 수 있다.
* Statement, PreparedStatement 객체를 생성할 수 있음
* 트랜잭션을 관리하고 커밋하거나 롤백 가능.
ex)
Connection conn = DriveManger.getConnection("jdbc:mysql://localhost:3306/mydb", "username", "password");
=> DriveManger는 데이터베이스 연결을 관리하는 클래스.
getConnection : 지정된 URL에 맞는 데이터베이스에 연결을 요청하고 연결된 Connection 객체 즉 conn 을 반환.
"jdbc:mysql://localhost:3306/mydb" : JDBC URL 을 의미
 * 뒤에 나와있는 username, password 는 데이터베이스에 접속하기 위한 것이므로 실제 MySql에서 사용하는 계정과 비밀번호로 대체해야함.


<2>Statement
주요기능
* SQL 쿼리를 실행하고 결과를 반환받을 수 있다.
* executeQuery(), executeUpdate(), execute() 등의 메서드를 통해 SQL을 실행할 수 있다.
ex) 
Statement stmt = conn.createStatement
ResultSet rs = stmt.executeQuery("SELECT * FROM users");
=> 위에서 conn 은 Connection의 객체로, 데이터베이스와의 연결을 나타낸다.
 * createStatement() 메서드는 Connection 객체 (conn)에서 SQL 쿼리를 실행할 수 있는 statement객체를 생성
* executeQuery() 는 조회 작업(즉,SELECT 쿼리)를 실행할 때 사용되는 메서드
* "SELECT * FROM users"는 users 테이블에서 모든 컬럼(*)과 모든 행을 조회하는 SQL 쿼리입니다.
* executeQuery() 는 SELECT 쿼리의 결과를 ResultSet 객체(rs)로 반환한다.

<3>PreparedStatement
* PreparedStatement는 Statement와 유사하지만, 미리 컴파일된 SQL 쿼리를 사용할 수 있어 성능이 개선되고 
SQL 인젝션 공격에 안전한 쿼리를 작성할 수 있습니다. 
변수 바인딩을 통해 동적인 값 처리가 가능하며, 반복적인 쿼리 실행 시 유리합니다.

ex)
String sql = "SELECT * FROM users WHERE age > ?";
PreparedStatement pstmt = conn.prepareStatement(sql);
pstmt.setInt(1, 20);
ResultSet rs = pstmt.executeQuery();
=> "SELECT * FROM users WHERE age > ?"는 users 테이블에서 age가 특정 값보다 큰 행들을 조회하는 쿼리입니다.
PreparedStatement pstmt = conn.prepareStatement(sql);
=> conn.prepareStatement(sql)는 Connection 객체에서 PreparedStatement를 생성하는 메서드입니다.
이 메서드는 SQL 쿼리를 미리 컴파일하고, 실행할 준비가 된 PreparedStatement 객체를 반환합니다.
 pstmt.setInt(1, 20);
=> pstmt.setInt(1, 20)는 PreparedStatement의 첫 번째 매개변수(인덱스 1)에 값을 설정하는 코드입니다. 인덱스는 1부터 시작합니다.
이 코드에서 ? 자리 표시자는 20으로 설정됩니다. 즉, SQL 쿼리는 "SELECT * FROM users WHERE age > 20"로 변환됩니다.
setInt(1, 20)는 age > ? 부분에서 ?를 20으로 바꾸는 역할을 합니다. 이 방법을 통해 age가 20보다 큰 사용자들을 조회할 수 있게 됩니다.



<4>ResultSet 
* 객체는 SQL 쿼리 실행 결과로 반환된 데이터를 나타냅니다.
ResultSet은 데이터베이스에서 반환된 행(row)을 순차적으로 처리할 수 있게 해줍니다.
주요 기능
SQL 쿼리 결과에서 데이터를 읽고 처리할 수 있음.
next(), getString(), getInt() 등의 메서드를 통해 결과 데이터를 접근하고 처리할 수 있음.
ex)
while (rs.next()) {
    // 각 열의 값을 가져와서 변수에 저장
    int id = rs.getInt("id");       // "id" 컬럼의 값을 정수로 가져옴
    String name = rs.getString("name");  // "name" 컬럼의 값을 문자열로 가져옴
    int age = rs.getInt("age");      // "age" 컬럼의 값을 정수로 가져옴
















